MODULE libPortAudio;

	(* OMAKE LINK "PortAudio" *)

	(* H2O version 2002, ported to VOC 2020 [SG] *)
	(* DANGER! Should be regenerated *)

    (* Generated by H2O using "OOC" back-end *)

    (* H2O: Constants occuring in macros *)

IMPORT SYSTEM, C := arC;

CONST
    Float32* = 000000001H;
    Int16* = 000000002H;
    Int32* = 000000004H;
    Int24* = 000000008H;
    PackedInt24* = 000000010H;
    Int8* = 000000020H;
    UInt8* = 000000040H;
    CustomFormat* = 000010000H;
    NoDevice* = 0FFFFFFFFH;
    NoFlag* = 000000000H;
    ClipOff* = 000000001H;
    DitherOff* = 000000002H;
    PlatformSpecificFlags* = 000010000H;

    (* H2O: Constants occuring in enumerated types *)

    NoError* = 000000000H;
    HostError* = 0FFFFD8F0H;
    InvalidChannelCount* = 0FFFFD8F1H;
    InvalidSampleRate* = 0FFFFD8F2H;
    InvalidDeviceId* = 0FFFFD8F3H;
    InvalidFlag* = 0FFFFD8F4H;
    SampleFormatNotSupported* = 0FFFFD8F5H;
    BadIODeviceCombination* = 0FFFFD8F6H;
    InsufficientMemory* = 0FFFFD8F7H;
    BufferTooBig* = 0FFFFD8F8H;
    BufferTooSmall* = 0FFFFD8F9H;
    NullCallback* = 0FFFFD8FAH;
    BadStreamPtr* = 0FFFFD8FBH;
    TimedOut* = 0FFFFD8FCH;
    InternalError* = 0FFFFD8FDH;
    DeviceUnavailable* = 0FFFFD8FEH;

    (* H2O: Defined Type Names *)

TYPE
    Address* = C.address (* void pointer *);

    (* String* = POINTER [CSTRING] TO ARRAY OF CHAR; *)

    String* = C.string;

    Error* = LONGINT;

    ErrorNum* = INTEGER (* enumerated type  *);

    SampleFormat* = C.longint;

    DeviceID* = LONGINT;

	Time* = LONGREAL;
    DeviceInfo* = RECORD
      structVersion- : C.int;
      name- : String;
      maxInputChannels- : C.int;
      maxOutputChannels- :C.int;
      defaultLowInputLatency- : Time;
      defaultLowOutputLatency- : Time;
      defaultHighInputLatency- : Time;
      defaultHighOutputLatency- : Time;
      defaultSampleRate- : C.double;
    END;

	StreamCallbackTimeInfoPtr* = POINTER TO StreamCallbackTimeInfo;

	StreamCallbackTimeInfo* = RECORD
		inputBufferAdcTime- : Time;
		currentTime- : Time;
		outputBufferDacTime- : Time
	END;

	StreamCallbackFlags* = C.longint;

    StreamFlags* = C.longint;

    PtrDeviceInfo* = POINTER [notag] TO DeviceInfo;

    Stream* = C.address (* void pointer *);

    Callback* = PROCEDURE (inputBuffer : Address; outputBuffer : Address; framesPerBuffer : C.longint; outTime : StreamCallbackTimeInfoPtr; flags : StreamCallbackFlags; userData : Address) : C.int;

	HostApiIndex* = C.int;

    (* H2O: Defined structures / unions *)


    (* H2O: Procedure prototypes *)

    PROCEDURE -includePortAudio* "#include <portaudio.h>";

    PROCEDURE -Initialize* () : Error
		"Pa_Initialize()";

    PROCEDURE -Terminate* () : Error
		"Pa_Terminate()";

	PROCEDURE -GetHostApiCount* () : HostApiIndex
		"Pa_GetHostApiCount()";

	PROCEDURE -GetDefaultHostApi* () : HostApiIndex
		"Pa_GetDefaultHostApi()";

(*
    PROCEDURE -GetHostError* () : LONGINT;
*)

    PROCEDURE -GetErrorText* (errnum : Error) : String
		"(arC_string) Pa_GetErrorText(errnum)";

(*
    PROCEDURE -CountDevices* () : LONGINT;
    PROCEDURE -GetDefaultInputDeviceID* () : DeviceID;
    PROCEDURE -GetDefaultOutputDeviceID* () : DeviceID;
    PROCEDURE -GetDeviceInfo* (device : DeviceID) : PtrDeviceInfo;
    PROCEDURE -OpenStream* (VAR stream [NIL_COMPAT]  : Stream; inputDevice : DeviceID; numInputChannels : LONGINT; inputSampleFormat : SampleFormat; inputDriverInfo : Address; outputDevice : DeviceID; numOutputChannels : LONGINT; outputSampleFormat : SampleFormat; outputDriverInfo : Address; sampleRate : LONGREAL; framesPerBuffer : LONGINT; numberOfBuffers : LONGINT; streamFlags : StreamFlags; callback : Callback; userData : Address) : Error;
*)
    PROCEDURE -OpenDefaultStream* (VAR stream : Stream; numInputChannels : LONGINT; numOutputChannels : LONGINT; sampleFormat : SampleFormat; sampleRate : LONGREAL; framesPerBuffer : LONGINT; callback : Callback; userData : Address) : Error
		"Pa_OpenDefaultStream((PaStream**) stream, numInputChannels, numOutputChannels, sampleFormat, sampleRate, framesPerBuffer, (PaStreamCallback *)callback, (void *)userData)";

    PROCEDURE -CloseStream* (stream : Stream) : Error
		"Pa_CloseStream((PaStream *) stream)";

    PROCEDURE -StartStream* (stream : Stream) : Error
		"Pa_StartStream((PaStream *) stream)";

    PROCEDURE -StopStream* (stream : Stream) : Error
		"Pa_StopStream((PaStream *) stream)";

    PROCEDURE -AbortStream* (stream : Stream) : Error
		"Pa_AbortStream((PaStream *) stream)";

    PROCEDURE -StreamActive* (stream : Stream) : Error
		"Pa_StreamActive((PaStream *) stream)";

    PROCEDURE -GetStreamTime* (stream : Stream) : Time
		"(PaTime)Pa_GetStreamTime((PaStream *) stream)";

    PROCEDURE -GetStreamCpuLoad* (stream : Stream) : LONGREAL
		"Pa_GetStreamCpuLoad((PaStream *) stream)";

(*
    PROCEDURE -GetMinNumBuffers* (framesPerBuffer : LONGINT; sampleRate : LONGREAL) : LONGINT;
*)
    PROCEDURE -Sleep* (msec : LONGINT)
		"Pa_Sleep((long) msec)";
(*
    PROCEDURE -GetSampleSize* (format : SampleFormat) : Error;
*)

END libPortAudio.
